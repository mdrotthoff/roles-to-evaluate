  
---
# Restart interfaces to load new configuration
#
# we had a lot of problems with lost connectivity, therefore we changed the
# role to use a script for network reconfiguration.
# Tested on Debian Jessie / Ubuntu 14.04 LTS and with Ethernet, Bonding Interfaces

- block:
  - name: Create temporary interface script for seamless network reload
    shell: mktemp
    register: mktemp_script
  
  - lineinfile: line="{{ item }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF
    with_items:
      - "ifdown "
      - "sleep 1"
      - "ifup "
  
  # Shutdown current network configuration
  - lineinfile: line="\1 {{ item.item.device }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifdown .*)'
    with_items: "{{ ether_result.results }}"
    when: ether_result is defined and 'results' in ether_result and item.changed
  
  - lineinfile: line="\1 {{ item.item.1 }}" dest={{ mktemp_script.stdout }} state=present  insertafter=EOF backrefs=True regexp='(ifdown .*)'
    with_items: "{{ bond_port_result.results }}"
    when: bond_port_result is defined and 'results' in bond_port_result and item.changed
  
  - lineinfile: line="\1 {{ item.item.device }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifdown .*)'
    with_items: "{{ bond_result.results }}"
    when: bond_result is defined and 'results' in bond_result and item.changed
  
  - lineinfile: line="\1 {{ item.item.device }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifdown .*)'
    with_items: "{{ vlan_result.results }}"
    when: vlan_result is defined and item.changed
  
  - lineinfile: line="\1 {{ item.item.device }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifdown .*)'
    with_items: "{{ bridge_result.results }}"
    when: bridge_result is defined and 'results' in bridge_result and item.changed
  
  - lineinfile: line="\1 {{ item.item.1 }};" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifdown .*)'
    with_items: "{{ bridge_port_result.results }}"
    when: bridge_port_result is defined and 'results' in bridge_port_result and item.changed
  
  # Start new network configuration
  - lineinfile: line="\1 {{ item.item.device }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifup .*)'
    with_items: "{{ ether_result.results }}"
    when: ether_result is defined and 'results' in ether_result and item.changed
  
  - lineinfile: line="\1 {{ item.item.1 }}" dest={{ mktemp_script.stdout }} state=present  insertafter=EOF backrefs=True regexp='(ifup .*)'
    with_items: "{{ bond_port_result.results }}"
    when: bond_port_result is defined and 'results' in bond_port_result and item.changed
  
  - lineinfile: line="\1 {{ item.item.device }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifup .*)'
    with_items: "{{ bond_result.results }}"
    when: bond_result is defined and 'results' in bond_result and item.changed
  
  - lineinfile: line="\1 {{ item.item.device }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifup .*)'
    with_items: "{{ vlan_result.results }}"
    when: vlan_result is defined and item.changed
  
  - lineinfile: line="\1 {{ item.item.device }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifup .*)'
    with_items: "{{ bridge_result.results }}"
    when: bridge_result is defined and 'results' in bridge_result and item.changed
   
  - lineinfile: line="\1 {{ item.item.1 }}" dest={{ mktemp_script.stdout }} state=present insertafter=EOF backrefs=True regexp='(ifup .*)'
    with_items: "{{ bridge_port_result.results }}"
    when: bridge_port_result is defined and 'results' in bridge_port_result and item.changed
  
  # Execute configuration change
  - name: Execute Network Restart
    shell: bash {{ mktemp_script.stdout }} | true
  
  # Cleanup
  - name: Cleanup Network Restart script
    file: path={{ mktemp_script.stdout }} state=absent

  when: network_allow_service_restart and ansible_os_family == 'Debian'
  
